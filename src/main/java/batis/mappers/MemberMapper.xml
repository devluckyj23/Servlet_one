<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 이 파일이 담고 있는 SQL문들 집합의 고유한 이름을 namespace 속성값으로 설정
일반적으로 이 SQL문들을 실행할 때 사용할 DAO인터페이스 이름을 지정 -->
<mapper namespace="com.exam.member.MemberDao">
<!--resultMap을 사용하여 조회결과의 어떤 컬럼값을 MemberVo 객체의 어떤 속성(변수)에 담을지(저장) 설정  -->
 <resultMap type="com.exam.member.MemberVo" id="MemberMap">
 <!--기본키(PK)에 해당되는 컬럼에 대해서는 result 대신 id 태그 사용-->
 <id property="memId" column="mem_id" />
<result property="memPass" column="MEM_PASS" />
<result property="memName" column="MEM_NAME" />
<result property="memPoint" column="MEM_POINT" />

 </resultMap>



  <!-- 등록할 SQL문과 동일한 이름의 태그를 사용하여 SQL을 등록
  이 파일 내에서 해당 SQL문의 고유한 이름을 id 속성값으로 설정
  일반적으로 이 SQL문을 실행할 때 사용할 DAO인터페이스의 메서드 이름을 지정
  select 실행 결과의 한 행(row)를 담을 객체의 클래스 명을 resultType 속성에 지정-->
  
  <select id="selectMemberList" resultType="MemberVo">
  <!--resultMap속성을 사용하여, id가 MemberMap인 resultMap에 써놓은대로 조회결과를 담도록 설정 -->
  <!-- <select id="selectMemberList" resultMap="MemberMap"> -->
    select mem_id, MEM_NAME, MEM_POINT from MEMBER
  </select>

  <select id="selectMember" resultType="MemberVo">
    select mem_id, MEM_NAME, MEM_POINT from MEMBER where mem_id = #{memId}
  </select>
  
  <!-- SQL문 실행시 전달받는 데이터의 타입을 parameterType 속성에 지정 가능(생략도 가능) -->
 <insert id="insertMember" parameterType="MemberVo">
 	INSERT INTO MEMBER (mem_id, MEM_PASS, MEM_NAME, MEM_POINT) VALUES (#{memId},#{memPass},#{memName},#{memPoint})
 </insert>
 <delete id="deleteMember" parameterType="java.lang.String">
 	DELETE FROM member WHERE mem_id = #{memId}
 </delete>
 
 <update id="updateMember" parameterType="MemberVo">
 	UPDATE MEMBER SET MEM_NAME=#{memName}, MEM_POINT=#{memPoint} where mem_id = #{memId}
 </update>
 
 <select id="selectLogin" resultType="MemberVo">
    select mem_id, MEM_NAME, MEM_POINT from MEMBER where mem_id = #{memId} and MEM_PASS=#{memPass}
  </select>
 
  <!-- 문자열, 정수 등 단일값을 갖는 데이터를 파라미터(인자)로 받은 경우, #{속성명}의 속성명에는 어떤 이름을 써도 무방
  일반적으로는 value 또는 변수명을 사용 -->
<!--  파라미터(인자)로 받은 객체의 속성값들을 SQL문 내에 사용하기 위해서, #{속성명} 또는 ${속성명} 표현을 사용 -->
<!--  #{속성명} : JDBC의 ? 채우기와 같은 방식으로 동작-->
<!--  ${속성명} : 문자열 이어붙이기 방식으로 동작(보안상 위험하므로 가급적 사용자제)-->
</mapper>